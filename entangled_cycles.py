# -*- coding: utf-8 -*-
"""entangled_cycles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    
"""

from PIL import Image
import re
import matplotlib.pyplot as plt
from matplotlib import cm
import numpy as np 
import random
import pandas as pd
# primes_list_path='primes.csv'
# primes_list=pd.read_csv(primes_list_path)
# df=primes_list

# def isPrime(N):
#     if df[df.eq(N).all(1)].values !=0:
#         answer =   True 
#     else:
#         answer =   False
            
#     return answer

#https://stackoverflow.com/questions/51632254/animated-3d-python-plot-with-several-moving-points
from matplotlib import pyplot as plt
import numpy as np
import mpl_toolkits.mplot3d.axes3d as p3
from matplotlib import animation


fig = plt.figure(figsize=(16,16))
ax = p3.Axes3D(fig)

q = [[-4.32, -2.17, -2.25, 4.72, 2.97, 1.74],
     [ 2.45, 9.73,  7.45,4.01,3.42,  1.80],[-1.40, -1.76, -3.08,-9.94,-3.13,-1.13]]
v = [[ 0.0068,0.024, -0.014,-0.013, -0.0068,-0.04],[ 0.012,
      0.056, -0.022,0.016,  0.0045, 0.039],
     [-0.0045,  0.031,  0.077,0.0016, -0.015,-0.00012]]

x=np.array(q[0])
y=np.array(q[1])
z=np.array(q[2])
s=np.array(v[0])
u=np.array(v[1])
w=np.array(v[2])


points, = ax.plot(x, y, z,'d' )
#points = ax.scatter(x, y, z,marker='o',s=190)
txt = fig.suptitle('')
path_out=' '
text='testing_black'
fps=1
plt.style.use('dark_background')
T_o=39
hsvwheel = cm.get_cmap('hsv', T_o)
#ax = fig.add_subplot(111, projection='3d')
def update_points(num, x, y, z, points):
    txt.set_text('num={:d}'.format(num)) # for debug purposes

    # calculate the new sets of coordinates here. The resulting arrays should have the same shape
    # as the original x,y,z
    new_x = x+np.random.normal(1,0.1, size=(len(x),))
    new_y = y+np.random.normal(1,0.1, size=(len(y),))
    new_z = z+np.random.normal(1,0.1, size=(len(z),))

    # update properties
    points.set_data(new_x,new_y)
    points.set_3d_properties(new_z, 'z')

    # return modified artists
    return points,txt

ani=animation.FuncAnimation(fig, update_points, frames=50, fargs=(x, y, z, points))
Writer = animation.writers['ffmpeg']
writer = Writer(fps=fps)
#ani.save(f'{path_out}{text}.mp4', writer=writer)
#ani.save(f'{path_out}{text}.mp4', writer=writer)
plt.show()